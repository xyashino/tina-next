//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  navigation: Navigation;
  navigationConnection: NavigationConnection;
  page: Page;
  pageConnection: PageConnection;
  intentions: Intentions;
  intentionsConnection: IntentionsConnection;
  gallery: Gallery;
  galleryConnection: GalleryConnection;
  contact: Contact;
  contactConnection: ContactConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNavigationArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNavigationConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NavigationFilter>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
};


export type QueryIntentionsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryIntentionsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<IntentionsFilter>;
};


export type QueryGalleryArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGalleryConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<GalleryFilter>;
};


export type QueryContactArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryContactConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContactFilter>;
};

export type DocumentFilter = {
  navigation?: InputMaybe<NavigationFilter>;
  page?: InputMaybe<PageFilter>;
  intentions?: InputMaybe<IntentionsFilter>;
  gallery?: InputMaybe<GalleryFilter>;
  contact?: InputMaybe<ContactFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Navigation | Page | Intentions | Gallery | Contact | Folder;

export type NavigationGroupsLinksPage = Page;

export type NavigationGroupsLinks = {
  __typename?: 'NavigationGroupsLinks';
  type?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  page?: Maybe<NavigationGroupsLinksPage>;
  externalUrl?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
};

export type NavigationGroups = {
  __typename?: 'NavigationGroups';
  label?: Maybe<Scalars['String']['output']>;
  isEnabled?: Maybe<Scalars['Boolean']['output']>;
  links?: Maybe<Array<Maybe<NavigationGroupsLinks>>>;
};

export type Navigation = Node & Document & {
  __typename?: 'Navigation';
  groups?: Maybe<Array<Maybe<NavigationGroups>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type NavigationGroupsLinksPageFilter = {
  page?: InputMaybe<PageFilter>;
};

export type NavigationGroupsLinksFilter = {
  type?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  page?: InputMaybe<NavigationGroupsLinksPageFilter>;
  externalUrl?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type NavigationGroupsFilter = {
  label?: InputMaybe<StringFilter>;
  isEnabled?: InputMaybe<BooleanFilter>;
  links?: InputMaybe<NavigationGroupsLinksFilter>;
};

export type NavigationFilter = {
  groups?: InputMaybe<NavigationGroupsFilter>;
};

export type NavigationConnectionEdges = {
  __typename?: 'NavigationConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Navigation>;
};

export type NavigationConnection = Connection & {
  __typename?: 'NavigationConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<NavigationConnectionEdges>>>;
};

export type Page = Node & Document & {
  __typename?: 'Page';
  title: Scalars['String']['output'];
  isPublished?: Maybe<Scalars['Boolean']['output']>;
  showTitle?: Maybe<Scalars['Boolean']['output']>;
  slug: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PageBodyAccordionOptionsFilter = {
  uniqueId?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PageBodyAccordionFilter = {
  type?: InputMaybe<StringFilter>;
  options?: InputMaybe<PageBodyAccordionOptionsFilter>;
};

export type PageBodyTabsViewGroupsFilter = {
  tabId?: InputMaybe<StringFilter>;
  tabTitle?: InputMaybe<StringFilter>;
  tabContent?: InputMaybe<RichTextFilter>;
};

export type PageBodyTabsViewFilter = {
  groups?: InputMaybe<PageBodyTabsViewGroupsFilter>;
};

export type PageBodyFilter = {
  Accordion?: InputMaybe<PageBodyAccordionFilter>;
  TabsView?: InputMaybe<PageBodyTabsViewFilter>;
};

export type PageFilter = {
  title?: InputMaybe<StringFilter>;
  isPublished?: InputMaybe<BooleanFilter>;
  showTitle?: InputMaybe<BooleanFilter>;
  slug?: InputMaybe<StringFilter>;
  body?: InputMaybe<PageBodyFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type IntentionsDaysIntentions = {
  __typename?: 'IntentionsDaysIntentions';
  hour: Scalars['String']['output'];
  intention: Scalars['JSON']['output'];
};

export type IntentionsDays = {
  __typename?: 'IntentionsDays';
  day: Scalars['String']['output'];
  intentions?: Maybe<Array<Maybe<IntentionsDaysIntentions>>>;
};

export type Intentions = Node & Document & {
  __typename?: 'Intentions';
  title: Scalars['String']['output'];
  isActive: Scalars['Boolean']['output'];
  startDate: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  days?: Maybe<Array<Maybe<IntentionsDays>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type IntentionsDaysIntentionsFilter = {
  hour?: InputMaybe<StringFilter>;
  intention?: InputMaybe<RichTextFilter>;
};

export type IntentionsDaysFilter = {
  day?: InputMaybe<StringFilter>;
  intentions?: InputMaybe<IntentionsDaysIntentionsFilter>;
};

export type IntentionsFilter = {
  title?: InputMaybe<StringFilter>;
  isActive?: InputMaybe<BooleanFilter>;
  startDate?: InputMaybe<DatetimeFilter>;
  description?: InputMaybe<StringFilter>;
  days?: InputMaybe<IntentionsDaysFilter>;
};

export type IntentionsConnectionEdges = {
  __typename?: 'IntentionsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Intentions>;
};

export type IntentionsConnection = Connection & {
  __typename?: 'IntentionsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<IntentionsConnectionEdges>>>;
};

export type GalleryGroupsImages = {
  __typename?: 'GalleryGroupsImages';
  title: Scalars['String']['output'];
  isEnabled?: Maybe<Scalars['Boolean']['output']>;
  link: Scalars['String']['output'];
  coverPhoto?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
};

export type GalleryGroups = {
  __typename?: 'GalleryGroups';
  groupTitle: Scalars['String']['output'];
  isEnabled?: Maybe<Scalars['Boolean']['output']>;
  images?: Maybe<Array<Maybe<GalleryGroupsImages>>>;
};

export type Gallery = Node & Document & {
  __typename?: 'Gallery';
  groups?: Maybe<Array<Maybe<GalleryGroups>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type GalleryGroupsImagesFilter = {
  title?: InputMaybe<StringFilter>;
  isEnabled?: InputMaybe<BooleanFilter>;
  link?: InputMaybe<StringFilter>;
  coverPhoto?: InputMaybe<ImageFilter>;
  description?: InputMaybe<StringFilter>;
};

export type GalleryGroupsFilter = {
  groupTitle?: InputMaybe<StringFilter>;
  isEnabled?: InputMaybe<BooleanFilter>;
  images?: InputMaybe<GalleryGroupsImagesFilter>;
};

export type GalleryFilter = {
  groups?: InputMaybe<GalleryGroupsFilter>;
};

export type GalleryConnectionEdges = {
  __typename?: 'GalleryConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Gallery>;
};

export type GalleryConnection = Connection & {
  __typename?: 'GalleryConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<GalleryConnectionEdges>>>;
};

export type ContactContactItems = {
  __typename?: 'ContactContactItems';
  label: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

export type Contact = Node & Document & {
  __typename?: 'Contact';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  contactItems?: Maybe<Array<Maybe<ContactContactItems>>>;
  googleMapsUrl: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ContactContactItemsFilter = {
  label?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  value?: InputMaybe<StringFilter>;
};

export type ContactFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  contactItems?: InputMaybe<ContactContactItemsFilter>;
  googleMapsUrl?: InputMaybe<StringFilter>;
};

export type ContactConnectionEdges = {
  __typename?: 'ContactConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Contact>;
};

export type ContactConnection = Connection & {
  __typename?: 'ContactConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ContactConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateNavigation: Navigation;
  createNavigation: Navigation;
  updatePage: Page;
  createPage: Page;
  updateIntentions: Intentions;
  createIntentions: Intentions;
  updateGallery: Gallery;
  createGallery: Gallery;
  updateContact: Contact;
  createContact: Contact;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateNavigationArgs = {
  relativePath: Scalars['String']['input'];
  params: NavigationMutation;
};


export type MutationCreateNavigationArgs = {
  relativePath: Scalars['String']['input'];
  params: NavigationMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationUpdateIntentionsArgs = {
  relativePath: Scalars['String']['input'];
  params: IntentionsMutation;
};


export type MutationCreateIntentionsArgs = {
  relativePath: Scalars['String']['input'];
  params: IntentionsMutation;
};


export type MutationUpdateGalleryArgs = {
  relativePath: Scalars['String']['input'];
  params: GalleryMutation;
};


export type MutationCreateGalleryArgs = {
  relativePath: Scalars['String']['input'];
  params: GalleryMutation;
};


export type MutationUpdateContactArgs = {
  relativePath: Scalars['String']['input'];
  params: ContactMutation;
};


export type MutationCreateContactArgs = {
  relativePath: Scalars['String']['input'];
  params: ContactMutation;
};

export type DocumentUpdateMutation = {
  navigation?: InputMaybe<NavigationMutation>;
  page?: InputMaybe<PageMutation>;
  intentions?: InputMaybe<IntentionsMutation>;
  gallery?: InputMaybe<GalleryMutation>;
  contact?: InputMaybe<ContactMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  navigation?: InputMaybe<NavigationMutation>;
  page?: InputMaybe<PageMutation>;
  intentions?: InputMaybe<IntentionsMutation>;
  gallery?: InputMaybe<GalleryMutation>;
  contact?: InputMaybe<ContactMutation>;
};

export type NavigationGroupsLinksMutation = {
  type?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['String']['input']>;
  externalUrl?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type NavigationGroupsMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  isEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  links?: InputMaybe<Array<InputMaybe<NavigationGroupsLinksMutation>>>;
};

export type NavigationMutation = {
  groups?: InputMaybe<Array<InputMaybe<NavigationGroupsMutation>>>;
};

export type PageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  isPublished?: InputMaybe<Scalars['Boolean']['input']>;
  showTitle?: InputMaybe<Scalars['Boolean']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type IntentionsDaysIntentionsMutation = {
  hour?: InputMaybe<Scalars['String']['input']>;
  intention?: InputMaybe<Scalars['JSON']['input']>;
};

export type IntentionsDaysMutation = {
  day?: InputMaybe<Scalars['String']['input']>;
  intentions?: InputMaybe<Array<InputMaybe<IntentionsDaysIntentionsMutation>>>;
};

export type IntentionsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  startDate?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  days?: InputMaybe<Array<InputMaybe<IntentionsDaysMutation>>>;
};

export type GalleryGroupsImagesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  isEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  coverPhoto?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type GalleryGroupsMutation = {
  groupTitle?: InputMaybe<Scalars['String']['input']>;
  isEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  images?: InputMaybe<Array<InputMaybe<GalleryGroupsImagesMutation>>>;
};

export type GalleryMutation = {
  groups?: InputMaybe<Array<InputMaybe<GalleryGroupsMutation>>>;
};

export type ContactContactItemsMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

export type ContactMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  contactItems?: InputMaybe<Array<InputMaybe<ContactContactItemsMutation>>>;
  googleMapsUrl?: InputMaybe<Scalars['String']['input']>;
};

export type NavigationPartsFragment = { __typename: 'Navigation', groups?: Array<{ __typename: 'NavigationGroups', label?: string | null, isEnabled?: boolean | null, links?: Array<{ __typename: 'NavigationGroupsLinks', type?: string | null, name?: string | null, externalUrl?: string | null, description?: string | null, page?: { __typename: 'Page', title: string, isPublished?: boolean | null, showTitle?: boolean | null, slug: string, body?: any | null, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } | null> | null };

export type PagePartsFragment = { __typename: 'Page', title: string, isPublished?: boolean | null, showTitle?: boolean | null, slug: string, body?: any | null };

export type IntentionsPartsFragment = { __typename: 'Intentions', title: string, isActive: boolean, startDate: string, description?: string | null, days?: Array<{ __typename: 'IntentionsDays', day: string, intentions?: Array<{ __typename: 'IntentionsDaysIntentions', hour: string, intention: any } | null> | null } | null> | null };

export type GalleryPartsFragment = { __typename: 'Gallery', groups?: Array<{ __typename: 'GalleryGroups', groupTitle: string, isEnabled?: boolean | null, images?: Array<{ __typename: 'GalleryGroupsImages', title: string, isEnabled?: boolean | null, link: string, coverPhoto?: string | null, description?: string | null } | null> | null } | null> | null };

export type ContactPartsFragment = { __typename: 'Contact', title: string, description?: string | null, googleMapsUrl: string, contactItems?: Array<{ __typename: 'ContactContactItems', label: string, description?: string | null, value?: string | null } | null> | null };

export type NavigationQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type NavigationQuery = { __typename?: 'Query', navigation: { __typename: 'Navigation', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, groups?: Array<{ __typename: 'NavigationGroups', label?: string | null, isEnabled?: boolean | null, links?: Array<{ __typename: 'NavigationGroupsLinks', type?: string | null, name?: string | null, externalUrl?: string | null, description?: string | null, page?: { __typename: 'Page', title: string, isPublished?: boolean | null, showTitle?: boolean | null, slug: string, body?: any | null, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } | null> | null } };

export type NavigationConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NavigationFilter>;
}>;


export type NavigationConnectionQuery = { __typename?: 'Query', navigationConnection: { __typename?: 'NavigationConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'NavigationConnectionEdges', cursor: string, node?: { __typename: 'Navigation', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, groups?: Array<{ __typename: 'NavigationGroups', label?: string | null, isEnabled?: boolean | null, links?: Array<{ __typename: 'NavigationGroupsLinks', type?: string | null, name?: string | null, externalUrl?: string | null, description?: string | null, page?: { __typename: 'Page', title: string, isPublished?: boolean | null, showTitle?: boolean | null, slug: string, body?: any | null, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } | null> | null } | null } | null> | null } };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename: 'Page', id: string, title: string, isPublished?: boolean | null, showTitle?: boolean | null, slug: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename: 'Page', id: string, title: string, isPublished?: boolean | null, showTitle?: boolean | null, slug: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type IntentionsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type IntentionsQuery = { __typename?: 'Query', intentions: { __typename: 'Intentions', id: string, title: string, isActive: boolean, startDate: string, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, days?: Array<{ __typename: 'IntentionsDays', day: string, intentions?: Array<{ __typename: 'IntentionsDaysIntentions', hour: string, intention: any } | null> | null } | null> | null } };

export type IntentionsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<IntentionsFilter>;
}>;


export type IntentionsConnectionQuery = { __typename?: 'Query', intentionsConnection: { __typename?: 'IntentionsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'IntentionsConnectionEdges', cursor: string, node?: { __typename: 'Intentions', id: string, title: string, isActive: boolean, startDate: string, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, days?: Array<{ __typename: 'IntentionsDays', day: string, intentions?: Array<{ __typename: 'IntentionsDaysIntentions', hour: string, intention: any } | null> | null } | null> | null } | null } | null> | null } };

export type GalleryQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type GalleryQuery = { __typename?: 'Query', gallery: { __typename: 'Gallery', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, groups?: Array<{ __typename: 'GalleryGroups', groupTitle: string, isEnabled?: boolean | null, images?: Array<{ __typename: 'GalleryGroupsImages', title: string, isEnabled?: boolean | null, link: string, coverPhoto?: string | null, description?: string | null } | null> | null } | null> | null } };

export type GalleryConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<GalleryFilter>;
}>;


export type GalleryConnectionQuery = { __typename?: 'Query', galleryConnection: { __typename?: 'GalleryConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'GalleryConnectionEdges', cursor: string, node?: { __typename: 'Gallery', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, groups?: Array<{ __typename: 'GalleryGroups', groupTitle: string, isEnabled?: boolean | null, images?: Array<{ __typename: 'GalleryGroupsImages', title: string, isEnabled?: boolean | null, link: string, coverPhoto?: string | null, description?: string | null } | null> | null } | null> | null } | null } | null> | null } };

export type ContactQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ContactQuery = { __typename?: 'Query', contact: { __typename: 'Contact', id: string, title: string, description?: string | null, googleMapsUrl: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contactItems?: Array<{ __typename: 'ContactContactItems', label: string, description?: string | null, value?: string | null } | null> | null } };

export type ContactConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContactFilter>;
}>;


export type ContactConnectionQuery = { __typename?: 'Query', contactConnection: { __typename?: 'ContactConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ContactConnectionEdges', cursor: string, node?: { __typename: 'Contact', id: string, title: string, description?: string | null, googleMapsUrl: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contactItems?: Array<{ __typename: 'ContactContactItems', label: string, description?: string | null, value?: string | null } | null> | null } | null } | null> | null } };

export const NavigationPartsFragmentDoc = gql`
    fragment NavigationParts on Navigation {
  __typename
  groups {
    __typename
    label
    isEnabled
    links {
      __typename
      type
      name
      page {
        ... on Page {
          __typename
          title
          isPublished
          showTitle
          slug
          body
        }
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
      }
      externalUrl
      description
    }
  }
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  __typename
  title
  isPublished
  showTitle
  slug
  body
}
    `;
export const IntentionsPartsFragmentDoc = gql`
    fragment IntentionsParts on Intentions {
  __typename
  title
  isActive
  startDate
  description
  days {
    __typename
    day
    intentions {
      __typename
      hour
      intention
    }
  }
}
    `;
export const GalleryPartsFragmentDoc = gql`
    fragment GalleryParts on Gallery {
  __typename
  groups {
    __typename
    groupTitle
    isEnabled
    images {
      __typename
      title
      isEnabled
      link
      coverPhoto
      description
    }
  }
}
    `;
export const ContactPartsFragmentDoc = gql`
    fragment ContactParts on Contact {
  __typename
  title
  description
  contactItems {
    __typename
    label
    description
    value
  }
  googleMapsUrl
}
    `;
export const NavigationDocument = gql`
    query navigation($relativePath: String!) {
  navigation(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...NavigationParts
  }
}
    ${NavigationPartsFragmentDoc}`;
export const NavigationConnectionDocument = gql`
    query navigationConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: NavigationFilter) {
  navigationConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...NavigationParts
      }
    }
  }
}
    ${NavigationPartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const IntentionsDocument = gql`
    query intentions($relativePath: String!) {
  intentions(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...IntentionsParts
  }
}
    ${IntentionsPartsFragmentDoc}`;
export const IntentionsConnectionDocument = gql`
    query intentionsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: IntentionsFilter) {
  intentionsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...IntentionsParts
      }
    }
  }
}
    ${IntentionsPartsFragmentDoc}`;
export const GalleryDocument = gql`
    query gallery($relativePath: String!) {
  gallery(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...GalleryParts
  }
}
    ${GalleryPartsFragmentDoc}`;
export const GalleryConnectionDocument = gql`
    query galleryConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: GalleryFilter) {
  galleryConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...GalleryParts
      }
    }
  }
}
    ${GalleryPartsFragmentDoc}`;
export const ContactDocument = gql`
    query contact($relativePath: String!) {
  contact(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ContactParts
  }
}
    ${ContactPartsFragmentDoc}`;
export const ContactConnectionDocument = gql`
    query contactConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ContactFilter) {
  contactConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ContactParts
      }
    }
  }
}
    ${ContactPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      navigation(variables: NavigationQueryVariables, options?: C): Promise<{data: NavigationQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NavigationQueryVariables, query: string}> {
        return requester<{data: NavigationQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NavigationQueryVariables, query: string}, NavigationQueryVariables>(NavigationDocument, variables, options);
      },
    navigationConnection(variables?: NavigationConnectionQueryVariables, options?: C): Promise<{data: NavigationConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NavigationConnectionQueryVariables, query: string}> {
        return requester<{data: NavigationConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NavigationConnectionQueryVariables, query: string}, NavigationConnectionQueryVariables>(NavigationConnectionDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      },
    intentions(variables: IntentionsQueryVariables, options?: C): Promise<{data: IntentionsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: IntentionsQueryVariables, query: string}> {
        return requester<{data: IntentionsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: IntentionsQueryVariables, query: string}, IntentionsQueryVariables>(IntentionsDocument, variables, options);
      },
    intentionsConnection(variables?: IntentionsConnectionQueryVariables, options?: C): Promise<{data: IntentionsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: IntentionsConnectionQueryVariables, query: string}> {
        return requester<{data: IntentionsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: IntentionsConnectionQueryVariables, query: string}, IntentionsConnectionQueryVariables>(IntentionsConnectionDocument, variables, options);
      },
    gallery(variables: GalleryQueryVariables, options?: C): Promise<{data: GalleryQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GalleryQueryVariables, query: string}> {
        return requester<{data: GalleryQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GalleryQueryVariables, query: string}, GalleryQueryVariables>(GalleryDocument, variables, options);
      },
    galleryConnection(variables?: GalleryConnectionQueryVariables, options?: C): Promise<{data: GalleryConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GalleryConnectionQueryVariables, query: string}> {
        return requester<{data: GalleryConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GalleryConnectionQueryVariables, query: string}, GalleryConnectionQueryVariables>(GalleryConnectionDocument, variables, options);
      },
    contact(variables: ContactQueryVariables, options?: C): Promise<{data: ContactQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactQueryVariables, query: string}> {
        return requester<{data: ContactQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactQueryVariables, query: string}, ContactQueryVariables>(ContactDocument, variables, options);
      },
    contactConnection(variables?: ContactConnectionQueryVariables, options?: C): Promise<{data: ContactConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactConnectionQueryVariables, query: string}> {
        return requester<{data: ContactConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactConnectionQueryVariables, query: string}, ContactConnectionQueryVariables>(ContactConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  