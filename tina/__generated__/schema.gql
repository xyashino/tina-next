# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  navigation(relativePath: String): Navigation!
  navigationConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NavigationFilter): NavigationConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  intentions(relativePath: String): Intentions!
  intentionsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: IntentionsFilter): IntentionsConnection!
  gallery(relativePath: String): Gallery!
  galleryConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GalleryFilter): GalleryConnection!
  contact(relativePath: String): Contact!
  contactConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ContactFilter): ContactConnection!
}

input DocumentFilter {
  navigation: NavigationFilter
  page: PageFilter
  intentions: IntentionsFilter
  gallery: GalleryFilter
  contact: ContactFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Navigation | Page | Intentions | Gallery | Contact | Folder

union NavigationGroupsLinksPage = Page

type NavigationGroupsLinks {
  type: String
  name: String
  page: NavigationGroupsLinksPage
  externalUrl: String
  description: String
}

type NavigationGroups {
  label: String
  isEnabled: Boolean
  links: [NavigationGroupsLinks]
}

type Navigation implements Node & Document {
  groups: [NavigationGroups]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input NavigationGroupsLinksPageFilter {
  page: PageFilter
}

input NavigationGroupsLinksFilter {
  type: StringFilter
  name: StringFilter
  page: NavigationGroupsLinksPageFilter
  externalUrl: StringFilter
  description: StringFilter
}

input NavigationGroupsFilter {
  label: StringFilter
  isEnabled: BooleanFilter
  links: NavigationGroupsLinksFilter
}

input NavigationFilter {
  groups: NavigationGroupsFilter
}

type NavigationConnectionEdges {
  cursor: String!
  node: Navigation
}

type NavigationConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NavigationConnectionEdges]
}

type Page implements Node & Document {
  isPublished: Boolean
  showTitle: Boolean
  slug: String!
  image: String
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageBodyAccordionOptionsFilter {
  uniqueId: StringFilter
  title: StringFilter
  body: RichTextFilter
}

input PageBodyAccordionFilter {
  type: StringFilter
  options: PageBodyAccordionOptionsFilter
}

input PageBodyTabsViewGroupsFilter {
  tabId: StringFilter
  tabTitle: StringFilter
  tabContent: RichTextFilter
}

input PageBodyTabsViewFilter {
  groups: PageBodyTabsViewGroupsFilter
}

input PageBodyFilter {
  Accordion: PageBodyAccordionFilter
  TabsView: PageBodyTabsViewFilter
}

input PageFilter {
  isPublished: BooleanFilter
  showTitle: BooleanFilter
  slug: StringFilter
  image: ImageFilter
  title: StringFilter
  body: PageBodyFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type IntentionsDaysIntentions {
  hour: String!
  intention: JSON!
}

type IntentionsDays {
  day: String!
  intentions: [IntentionsDaysIntentions]
}

type Intentions implements Node & Document {
  title: String!
  isActive: Boolean!
  startDate: String!
  description: String
  days: [IntentionsDays]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input IntentionsDaysIntentionsFilter {
  hour: StringFilter
  intention: RichTextFilter
}

input IntentionsDaysFilter {
  day: StringFilter
  intentions: IntentionsDaysIntentionsFilter
}

input IntentionsFilter {
  title: StringFilter
  isActive: BooleanFilter
  startDate: DatetimeFilter
  description: StringFilter
  days: IntentionsDaysFilter
}

type IntentionsConnectionEdges {
  cursor: String!
  node: Intentions
}

type IntentionsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [IntentionsConnectionEdges]
}

type GalleryGroupsImages {
  title: String!
  isEnabled: Boolean
  link: String!
  coverPhoto: String
  description: String
}

type GalleryGroups {
  groupTitle: String!
  isEnabled: Boolean
  images: [GalleryGroupsImages]
}

type Gallery implements Node & Document {
  groups: [GalleryGroups]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GalleryGroupsImagesFilter {
  title: StringFilter
  isEnabled: BooleanFilter
  link: StringFilter
  coverPhoto: ImageFilter
  description: StringFilter
}

input GalleryGroupsFilter {
  groupTitle: StringFilter
  isEnabled: BooleanFilter
  images: GalleryGroupsImagesFilter
}

input GalleryFilter {
  groups: GalleryGroupsFilter
}

type GalleryConnectionEdges {
  cursor: String!
  node: Gallery
}

type GalleryConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GalleryConnectionEdges]
}

type ContactContactItems {
  label: String!
  description: String
  value: String
}

type Contact implements Node & Document {
  title: String!
  description: String
  contactItems: [ContactContactItems]
  googleMapsUrl: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ContactContactItemsFilter {
  label: StringFilter
  description: StringFilter
  value: StringFilter
}

input ContactFilter {
  title: StringFilter
  description: StringFilter
  contactItems: ContactContactItemsFilter
  googleMapsUrl: StringFilter
}

type ContactConnectionEdges {
  cursor: String!
  node: Contact
}

type ContactConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ContactConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateNavigation(relativePath: String!, params: NavigationMutation!): Navigation!
  createNavigation(relativePath: String!, params: NavigationMutation!): Navigation!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateIntentions(relativePath: String!, params: IntentionsMutation!): Intentions!
  createIntentions(relativePath: String!, params: IntentionsMutation!): Intentions!
  updateGallery(relativePath: String!, params: GalleryMutation!): Gallery!
  createGallery(relativePath: String!, params: GalleryMutation!): Gallery!
  updateContact(relativePath: String!, params: ContactMutation!): Contact!
  createContact(relativePath: String!, params: ContactMutation!): Contact!
}

input DocumentUpdateMutation {
  navigation: NavigationMutation
  page: PageMutation
  intentions: IntentionsMutation
  gallery: GalleryMutation
  contact: ContactMutation
  relativePath: String
}

input DocumentMutation {
  navigation: NavigationMutation
  page: PageMutation
  intentions: IntentionsMutation
  gallery: GalleryMutation
  contact: ContactMutation
}

input NavigationGroupsLinksMutation {
  type: String
  name: String
  page: String
  externalUrl: String
  description: String
}

input NavigationGroupsMutation {
  label: String
  isEnabled: Boolean
  links: [NavigationGroupsLinksMutation]
}

input NavigationMutation {
  groups: [NavigationGroupsMutation]
}

input PageMutation {
  isPublished: Boolean
  showTitle: Boolean
  slug: String
  image: String
  title: String
  body: JSON
}

input IntentionsDaysIntentionsMutation {
  hour: String
  intention: JSON
}

input IntentionsDaysMutation {
  day: String
  intentions: [IntentionsDaysIntentionsMutation]
}

input IntentionsMutation {
  title: String
  isActive: Boolean
  startDate: String
  description: String
  days: [IntentionsDaysMutation]
}

input GalleryGroupsImagesMutation {
  title: String
  isEnabled: Boolean
  link: String
  coverPhoto: String
  description: String
}

input GalleryGroupsMutation {
  groupTitle: String
  isEnabled: Boolean
  images: [GalleryGroupsImagesMutation]
}

input GalleryMutation {
  groups: [GalleryGroupsMutation]
}

input ContactContactItemsMutation {
  label: String
  description: String
  value: String
}

input ContactMutation {
  title: String
  description: String
  contactItems: [ContactContactItemsMutation]
  googleMapsUrl: String
}

schema {
  query: Query
  mutation: Mutation
}
